package kemkdf

import (
	"bytes"
	"encoding/base64"
	"testing"

	"github.com/codahale/gubbins/assert"
	"github.com/codahale/veil/pkg/veil/internal/r255"
	"github.com/gtank/ristretto255"
)

func TestDeriveKey(t *testing.T) {
	t.Parallel()

	zzE := ristretto255.NewElement().FromUniformBytes(bytes.Repeat([]byte{0x04}, 64))
	zzS := ristretto255.NewElement().FromUniformBytes(bytes.Repeat([]byte{0x49}, 64))

	pubE, _ := r255.DecodePublicKey([]byte{
		0x16, 0x1d, 0xba, 0x1e, 0x8d, 0xa2, 0x6d, 0x86, 0x01, 0xc2, 0x89, 0x0c, 0xa5, 0xcd, 0x01, 0x3f,
		0xab, 0x45, 0x75, 0x03, 0x13, 0xa4, 0x2e, 0x67, 0xbb, 0x08, 0x65, 0x62, 0x57, 0x8e, 0x3a, 0x59,
	})

	pubR, _ := r255.DecodePublicKey([]byte{
		0x3a, 0xca, 0xb9, 0x22, 0x71, 0xdd, 0x43, 0x42, 0xa1, 0xcf, 0x57, 0xf9, 0x5f, 0xa5, 0xc5, 0x4e,
		0xdd, 0x37, 0x0e, 0xee, 0x80, 0xcc, 0x6c, 0x41, 0x1c, 0xaf, 0x9e, 0x2c, 0x2b, 0xac, 0x28, 0x1e,
	})

	pubS, _ := r255.DecodePublicKey([]byte{
		0x8a, 0xa7, 0x11, 0xe5, 0x62, 0xec, 0x77, 0x8d, 0x0f, 0x17, 0x69, 0xf2, 0x28, 0x5b, 0x0e, 0x3b,
		0x4b, 0x65, 0x83, 0x5a, 0xe4, 0xf9, 0xda, 0x30, 0x6f, 0x88, 0x18, 0x7e, 0x91, 0xd7, 0xe2, 0x5a,
	})

	t.Run("header key", func(t *testing.T) {
		t.Parallel()

		key := DeriveKey(zzE, zzS, pubE, pubR, pubS, 16, true)

		assert.Equal(t, "derived header key",
			"66+8FaH1eIZUiRe232LNSg", base64.RawStdEncoding.EncodeToString(key))
	})

	t.Run("message key", func(t *testing.T) {
		t.Parallel()

		key := DeriveKey(zzE, zzS, pubE, pubR, pubS, 16, false)

		assert.Equal(t, "derived header key",
			"MwiNu7SPOmiHWJkh2Os3wA", base64.RawStdEncoding.EncodeToString(key))
	})
}
